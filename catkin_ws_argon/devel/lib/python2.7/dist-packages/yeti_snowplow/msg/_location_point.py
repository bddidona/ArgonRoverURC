# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from yeti_snowplow/location_point.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class location_point(genpy.Message):
  _md5sum = "06cbcc71d2b6df75dbf930c8371e4b8c"
  _type = "yeti_snowplow/location_point"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 distance
float64 heading
float64 correctedX
float64 correctedY
int32 id"""
  __slots__ = ['x','y','distance','heading','correctedX','correctedY','id']
  _slot_types = ['float64','float64','float64','float64','float64','float64','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,distance,heading,correctedX,correctedY,id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(location_point, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.distance is None:
        self.distance = 0.
      if self.heading is None:
        self.heading = 0.
      if self.correctedX is None:
        self.correctedX = 0.
      if self.correctedY is None:
        self.correctedY = 0.
      if self.id is None:
        self.id = 0
    else:
      self.x = 0.
      self.y = 0.
      self.distance = 0.
      self.heading = 0.
      self.correctedX = 0.
      self.correctedY = 0.
      self.id = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6di().pack(_x.x, _x.y, _x.distance, _x.heading, _x.correctedX, _x.correctedY, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x, _x.y, _x.distance, _x.heading, _x.correctedX, _x.correctedY, _x.id,) = _get_struct_6di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6di().pack(_x.x, _x.y, _x.distance, _x.heading, _x.correctedX, _x.correctedY, _x.id))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 52
      (_x.x, _x.y, _x.distance, _x.heading, _x.correctedX, _x.correctedY, _x.id,) = _get_struct_6di().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6di = None
def _get_struct_6di():
    global _struct_6di
    if _struct_6di is None:
        _struct_6di = struct.Struct("<6di")
    return _struct_6di
