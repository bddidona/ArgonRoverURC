// Generated by gencpp from file yeti_snowplow/joystick.msg
// DO NOT EDIT!


#ifndef YETI_SNOWPLOW_MESSAGE_JOYSTICK_H
#define YETI_SNOWPLOW_MESSAGE_JOYSTICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yeti_snowplow
{
template <class ContainerAllocator>
struct joystick_
{
  typedef joystick_<ContainerAllocator> Type;

  joystick_()
    : A(false)
    , B(false)
    , X(false)
    , Y(false)
    , LB(false)
    , RB(false)
    , Back(false)
    , Start(false)
    , Guide(false)
    , LS(false)
    , RS(false)
    , LeftStick_LR(0.0)
    , LeftStick_UD(0.0)
    , RightStick_LR(0.0)
    , RightStick_UD(0.0)
    , LT(0.0)
    , RT(0.0)
    , DPad_LR(0.0)
    , DPad_UD(0.0)  {
    }
  joystick_(const ContainerAllocator& _alloc)
    : A(false)
    , B(false)
    , X(false)
    , Y(false)
    , LB(false)
    , RB(false)
    , Back(false)
    , Start(false)
    , Guide(false)
    , LS(false)
    , RS(false)
    , LeftStick_LR(0.0)
    , LeftStick_UD(0.0)
    , RightStick_LR(0.0)
    , RightStick_UD(0.0)
    , LT(0.0)
    , RT(0.0)
    , DPad_LR(0.0)
    , DPad_UD(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _A_type;
  _A_type A;

   typedef uint8_t _B_type;
  _B_type B;

   typedef uint8_t _X_type;
  _X_type X;

   typedef uint8_t _Y_type;
  _Y_type Y;

   typedef uint8_t _LB_type;
  _LB_type LB;

   typedef uint8_t _RB_type;
  _RB_type RB;

   typedef uint8_t _Back_type;
  _Back_type Back;

   typedef uint8_t _Start_type;
  _Start_type Start;

   typedef uint8_t _Guide_type;
  _Guide_type Guide;

   typedef uint8_t _LS_type;
  _LS_type LS;

   typedef uint8_t _RS_type;
  _RS_type RS;

   typedef float _LeftStick_LR_type;
  _LeftStick_LR_type LeftStick_LR;

   typedef float _LeftStick_UD_type;
  _LeftStick_UD_type LeftStick_UD;

   typedef float _RightStick_LR_type;
  _RightStick_LR_type RightStick_LR;

   typedef float _RightStick_UD_type;
  _RightStick_UD_type RightStick_UD;

   typedef float _LT_type;
  _LT_type LT;

   typedef float _RT_type;
  _RT_type RT;

   typedef float _DPad_LR_type;
  _DPad_LR_type DPad_LR;

   typedef float _DPad_UD_type;
  _DPad_UD_type DPad_UD;




  typedef boost::shared_ptr< ::yeti_snowplow::joystick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yeti_snowplow::joystick_<ContainerAllocator> const> ConstPtr;

}; // struct joystick_

typedef ::yeti_snowplow::joystick_<std::allocator<void> > joystick;

typedef boost::shared_ptr< ::yeti_snowplow::joystick > joystickPtr;
typedef boost::shared_ptr< ::yeti_snowplow::joystick const> joystickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yeti_snowplow::joystick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yeti_snowplow::joystick_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace yeti_snowplow

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'yeti_snowplow': ['/home/ben/Catkin/catkin_ws_argon/src/rover_manual/msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::yeti_snowplow::joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yeti_snowplow::joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yeti_snowplow::joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yeti_snowplow::joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yeti_snowplow::joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yeti_snowplow::joystick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yeti_snowplow::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2638f5eded79bb441e076bbda419a866";
  }

  static const char* value(const ::yeti_snowplow::joystick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2638f5eded79bb44ULL;
  static const uint64_t static_value2 = 0x1e076bbda419a866ULL;
};

template<class ContainerAllocator>
struct DataType< ::yeti_snowplow::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yeti_snowplow/joystick";
  }

  static const char* value(const ::yeti_snowplow::joystick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yeti_snowplow::joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool A\n\
bool B\n\
bool X\n\
bool Y\n\
bool LB\n\
bool RB\n\
bool Back\n\
bool Start\n\
bool Guide\n\
bool LS\n\
bool RS\n\
\n\
float32 LeftStick_LR\n\
float32 LeftStick_UD\n\
float32 RightStick_LR\n\
float32 RightStick_UD\n\
float32 LT\n\
float32 RT\n\
float32 DPad_LR\n\
float32 DPad_UD\n\
";
  }

  static const char* value(const ::yeti_snowplow::joystick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yeti_snowplow::joystick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.A);
      stream.next(m.B);
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.LB);
      stream.next(m.RB);
      stream.next(m.Back);
      stream.next(m.Start);
      stream.next(m.Guide);
      stream.next(m.LS);
      stream.next(m.RS);
      stream.next(m.LeftStick_LR);
      stream.next(m.LeftStick_UD);
      stream.next(m.RightStick_LR);
      stream.next(m.RightStick_UD);
      stream.next(m.LT);
      stream.next(m.RT);
      stream.next(m.DPad_LR);
      stream.next(m.DPad_UD);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct joystick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yeti_snowplow::joystick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yeti_snowplow::joystick_<ContainerAllocator>& v)
  {
    s << indent << "A: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.A);
    s << indent << "B: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.B);
    s << indent << "X: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Y);
    s << indent << "LB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LB);
    s << indent << "RB: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RB);
    s << indent << "Back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Back);
    s << indent << "Start: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Start);
    s << indent << "Guide: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Guide);
    s << indent << "LS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LS);
    s << indent << "RS: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RS);
    s << indent << "LeftStick_LR: ";
    Printer<float>::stream(s, indent + "  ", v.LeftStick_LR);
    s << indent << "LeftStick_UD: ";
    Printer<float>::stream(s, indent + "  ", v.LeftStick_UD);
    s << indent << "RightStick_LR: ";
    Printer<float>::stream(s, indent + "  ", v.RightStick_LR);
    s << indent << "RightStick_UD: ";
    Printer<float>::stream(s, indent + "  ", v.RightStick_UD);
    s << indent << "LT: ";
    Printer<float>::stream(s, indent + "  ", v.LT);
    s << indent << "RT: ";
    Printer<float>::stream(s, indent + "  ", v.RT);
    s << indent << "DPad_LR: ";
    Printer<float>::stream(s, indent + "  ", v.DPad_LR);
    s << indent << "DPad_UD: ";
    Printer<float>::stream(s, indent + "  ", v.DPad_UD);
  }
};

} // namespace message_operations
} // namespace ros

#endif // YETI_SNOWPLOW_MESSAGE_JOYSTICK_H
