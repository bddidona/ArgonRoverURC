// Generated by gencpp from file rover_manual/target.msg
// DO NOT EDIT!


#ifndef ROVER_MANUAL_MESSAGE_TARGET_H
#define ROVER_MANUAL_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rover_manual/location_point.h>

namespace rover_manual
{
template <class ContainerAllocator>
struct target_
{
  typedef target_<ContainerAllocator> Type;

  target_()
    : dir(0)
    , location()
    , PID(false)
    , speed(0.0)  {
    }
  target_(const ContainerAllocator& _alloc)
    : dir(0)
    , location(_alloc)
    , PID(false)
    , speed(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _dir_type;
  _dir_type dir;

   typedef  ::rover_manual::location_point_<ContainerAllocator>  _location_type;
  _location_type location;

   typedef uint8_t _PID_type;
  _PID_type PID;

   typedef double _speed_type;
  _speed_type speed;


    enum { FORWARD = 1 };
     enum { BACKWARD = -1 };
 

  typedef boost::shared_ptr< ::rover_manual::target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rover_manual::target_<ContainerAllocator> const> ConstPtr;

}; // struct target_

typedef ::rover_manual::target_<std::allocator<void> > target;

typedef boost::shared_ptr< ::rover_manual::target > targetPtr;
typedef boost::shared_ptr< ::rover_manual::target const> targetConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rover_manual::target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rover_manual::target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rover_manual

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rover_manual': ['/home/ben/Catkin/catkin_ws_argon/src/rover_manual/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rover_manual::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rover_manual::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_manual::target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rover_manual::target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_manual::target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rover_manual::target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rover_manual::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf232f9c15f895c77544704e246906a3";
  }

  static const char* value(const ::rover_manual::target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf232f9c15f895c7ULL;
  static const uint64_t static_value2 = 0x7544704e246906a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::rover_manual::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rover_manual/target";
  }

  static const char* value(const ::rover_manual::target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rover_manual::target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 dir\n\
int32 FORWARD=1\n\
int32 BACKWARD=-1\n\
location_point location\n\
bool PID\n\
float64 speed\n\
================================================================================\n\
MSG: rover_manual/location_point\n\
float64 x\n\
float64 y\n\
float64 distance\n\
float64 heading\n\
float64 correctedX\n\
float64 correctedY\n\
int32 id\n\
";
  }

  static const char* value(const ::rover_manual::target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rover_manual::target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.dir);
      stream.next(m.location);
      stream.next(m.PID);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rover_manual::target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rover_manual::target_<ContainerAllocator>& v)
  {
    s << indent << "dir: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dir);
    s << indent << "location: ";
    s << std::endl;
    Printer< ::rover_manual::location_point_<ContainerAllocator> >::stream(s, indent + "  ", v.location);
    s << indent << "PID: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PID);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROVER_MANUAL_MESSAGE_TARGET_H
